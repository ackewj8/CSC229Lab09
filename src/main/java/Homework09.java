/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */

/**
 *
 * @author MoaathAlrajab
 */

/* 
NOTE: I moved the DoublyLinkedList.java and DoublyLinkedListDemoApp.java files
to this file.
*/

public class Homework09 {
    
    // ToDo 01:  Write an algorithm to solve the following problem
    /*
    The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over one hundred divisors?
    
    */
    
    public static int triNum(int n) {
        int total = 0; // Used to make triangle numbers
        int divisors = 0; // Amount of total's divisors
        DoublyLinkedList divide = new DoublyLinkedList(); // Used to track total's divisors
        for(int i = 1; i<=n;i++) { // Making a triangle number
            total = total + i; // Next triangle number
        }
        for(int j = 1; j<=total;j++) { // Counting the divisors of the triangle number
            if(total % j == 0) { // Determines if j is a divisor of total
                Node m = new Node(j); // Add a divisor to divide
                m.data = j; // Assign m.data j's value
                divide.append(m); // Add the divisor to divide
                m = m.next; // Go to the next node
            }
        }
        divisors = divide.listSize(divide); // Determines divide's size and assigns divisors that value
        if(divisors > 100) { // Checks to see if total has over 100 divisors
            System.out.println("Number: " + total); // First triangle number to have over 100 divisors
            System.out.println("Divisors: ");
            divide.printList(); // Print out total's divisors
            System.out.println(total + " has over 100 divisors."); // Indicates that the triangle number has over 100 divisors
        }
        return divisors; // Returns the number of total's divisors
    }
    
    public static void main(String[] args) {
        int n = 1;
        int triangle;
        triangle = triNum(n);
        while(triangle < 101) { // n increases until triangle is over 100
                n++;
                triangle = triNum(n);
        }
        System.out.println("It has " + triangle + " divisors."); // Prints out the amount of divisors
    }
    
}
